// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Work is an object representing the database table.
type Work struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title     string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	SeasonID  int       `boil:"season_id" json:"season_id" toml:"season_id" yaml:"season_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *workR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L workL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WorkColumns = struct {
	ID        string
	Title     string
	SeasonID  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Title:     "title",
	SeasonID:  "season_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var WorkTableColumns = struct {
	ID        string
	Title     string
	SeasonID  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "Works.id",
	Title:     "Works.title",
	SeasonID:  "Works.season_id",
	CreatedAt: "Works.created_at",
	UpdatedAt: "Works.updated_at",
}

// Generated where

var WorkWhere = struct {
	ID        whereHelperint
	Title     whereHelperstring
	SeasonID  whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint{field: "\"Works\".\"id\""},
	Title:     whereHelperstring{field: "\"Works\".\"title\""},
	SeasonID:  whereHelperint{field: "\"Works\".\"season_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"Works\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"Works\".\"updated_at\""},
}

// WorkRels is where relationship names are stored.
var WorkRels = struct {
	WorkEpisodes string
}{
	WorkEpisodes: "WorkEpisodes",
}

// workR is where relationships are stored.
type workR struct {
	WorkEpisodes EpisodeSlice `boil:"WorkEpisodes" json:"WorkEpisodes" toml:"WorkEpisodes" yaml:"WorkEpisodes"`
}

// NewStruct creates a new relationship struct
func (*workR) NewStruct() *workR {
	return &workR{}
}

func (r *workR) GetWorkEpisodes() EpisodeSlice {
	if r == nil {
		return nil
	}
	return r.WorkEpisodes
}

// workL is where Load methods for each relationship are stored.
type workL struct{}

var (
	workAllColumns            = []string{"id", "title", "season_id", "created_at", "updated_at"}
	workColumnsWithoutDefault = []string{"id", "title", "season_id"}
	workColumnsWithDefault    = []string{"created_at", "updated_at"}
	workPrimaryKeyColumns     = []string{"id"}
	workGeneratedColumns      = []string{}
)

type (
	// WorkSlice is an alias for a slice of pointers to Work.
	// This should almost always be used instead of []Work.
	WorkSlice []*Work
	// WorkHook is the signature for custom Work hook methods
	WorkHook func(context.Context, boil.ContextExecutor, *Work) error

	workQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	workType                 = reflect.TypeOf(&Work{})
	workMapping              = queries.MakeStructMapping(workType)
	workPrimaryKeyMapping, _ = queries.BindMapping(workType, workMapping, workPrimaryKeyColumns)
	workInsertCacheMut       sync.RWMutex
	workInsertCache          = make(map[string]insertCache)
	workUpdateCacheMut       sync.RWMutex
	workUpdateCache          = make(map[string]updateCache)
	workUpsertCacheMut       sync.RWMutex
	workUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var workAfterSelectHooks []WorkHook

var workBeforeInsertHooks []WorkHook
var workAfterInsertHooks []WorkHook

var workBeforeUpdateHooks []WorkHook
var workAfterUpdateHooks []WorkHook

var workBeforeDeleteHooks []WorkHook
var workAfterDeleteHooks []WorkHook

var workBeforeUpsertHooks []WorkHook
var workAfterUpsertHooks []WorkHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Work) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Work) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Work) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Work) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Work) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Work) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Work) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Work) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Work) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWorkHook registers your hook function for all future operations.
func AddWorkHook(hookPoint boil.HookPoint, workHook WorkHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		workAfterSelectHooks = append(workAfterSelectHooks, workHook)
	case boil.BeforeInsertHook:
		workBeforeInsertHooks = append(workBeforeInsertHooks, workHook)
	case boil.AfterInsertHook:
		workAfterInsertHooks = append(workAfterInsertHooks, workHook)
	case boil.BeforeUpdateHook:
		workBeforeUpdateHooks = append(workBeforeUpdateHooks, workHook)
	case boil.AfterUpdateHook:
		workAfterUpdateHooks = append(workAfterUpdateHooks, workHook)
	case boil.BeforeDeleteHook:
		workBeforeDeleteHooks = append(workBeforeDeleteHooks, workHook)
	case boil.AfterDeleteHook:
		workAfterDeleteHooks = append(workAfterDeleteHooks, workHook)
	case boil.BeforeUpsertHook:
		workBeforeUpsertHooks = append(workBeforeUpsertHooks, workHook)
	case boil.AfterUpsertHook:
		workAfterUpsertHooks = append(workAfterUpsertHooks, workHook)
	}
}

// OneG returns a single work record from the query using the global executor.
func (q workQuery) OneG(ctx context.Context) (*Work, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single work record from the query.
func (q workQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Work, error) {
	o := &Work{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Works")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Work records from the query using the global executor.
func (q workQuery) AllG(ctx context.Context) (WorkSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Work records from the query.
func (q workQuery) All(ctx context.Context, exec boil.ContextExecutor) (WorkSlice, error) {
	var o []*Work

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Work slice")
	}

	if len(workAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Work records in the query using the global executor
func (q workQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Work records in the query.
func (q workQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Works rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q workQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q workQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Works exists")
	}

	return count > 0, nil
}

// WorkEpisodes retrieves all the Episode's Episodes with an executor via work_id column.
func (o *Work) WorkEpisodes(mods ...qm.QueryMod) episodeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"Episodes\".\"work_id\"=?", o.ID),
	)

	return Episodes(queryMods...)
}

// LoadWorkEpisodes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (workL) LoadWorkEpisodes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWork interface{}, mods queries.Applicator) error {
	var slice []*Work
	var object *Work

	if singular {
		var ok bool
		object, ok = maybeWork.(*Work)
		if !ok {
			object = new(Work)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWork)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWork))
			}
		}
	} else {
		s, ok := maybeWork.(*[]*Work)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWork)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWork))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &workR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &workR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Episodes`),
		qm.WhereIn(`Episodes.work_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Episodes")
	}

	var resultSlice []*Episode
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Episodes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Episodes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Episodes")
	}

	if len(episodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WorkEpisodes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &episodeR{}
			}
			foreign.R.Work = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.WorkID {
				local.R.WorkEpisodes = append(local.R.WorkEpisodes, foreign)
				if foreign.R == nil {
					foreign.R = &episodeR{}
				}
				foreign.R.Work = local
				break
			}
		}
	}

	return nil
}

// AddWorkEpisodesG adds the given related objects to the existing relationships
// of the Work, optionally inserting them as new records.
// Appends related to o.R.WorkEpisodes.
// Sets related.R.Work appropriately.
// Uses the global database handle.
func (o *Work) AddWorkEpisodesG(ctx context.Context, insert bool, related ...*Episode) error {
	return o.AddWorkEpisodes(ctx, boil.GetContextDB(), insert, related...)
}

// AddWorkEpisodes adds the given related objects to the existing relationships
// of the Work, optionally inserting them as new records.
// Appends related to o.R.WorkEpisodes.
// Sets related.R.Work appropriately.
func (o *Work) AddWorkEpisodes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Episode) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.WorkID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"Episodes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"work_id"}),
				strmangle.WhereClause("\"", "\"", 2, episodePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.WorkID = o.ID
		}
	}

	if o.R == nil {
		o.R = &workR{
			WorkEpisodes: related,
		}
	} else {
		o.R.WorkEpisodes = append(o.R.WorkEpisodes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &episodeR{
				Work: o,
			}
		} else {
			rel.R.Work = o
		}
	}
	return nil
}

// Works retrieves all the records using an executor.
func Works(mods ...qm.QueryMod) workQuery {
	mods = append(mods, qm.From("\"Works\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"Works\".*"})
	}

	return workQuery{q}
}

// FindWorkG retrieves a single record by ID.
func FindWorkG(ctx context.Context, iD int, selectCols ...string) (*Work, error) {
	return FindWork(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindWork retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWork(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Work, error) {
	workObj := &Work{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"Works\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, workObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Works")
	}

	if err = workObj.doAfterSelectHooks(ctx, exec); err != nil {
		return workObj, err
	}

	return workObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Work) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Work) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Works provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(workColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	workInsertCacheMut.RLock()
	cache, cached := workInsertCache[key]
	workInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			workAllColumns,
			workColumnsWithDefault,
			workColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(workType, workMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(workType, workMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"Works\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"Works\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Works")
	}

	if !cached {
		workInsertCacheMut.Lock()
		workInsertCache[key] = cache
		workInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Work record using the global executor.
// See Update for more documentation.
func (o *Work) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Work.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Work) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	workUpdateCacheMut.RLock()
	cache, cached := workUpdateCache[key]
	workUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			workAllColumns,
			workPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Works, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"Works\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, workPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(workType, workMapping, append(wl, workPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Works row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Works")
	}

	if !cached {
		workUpdateCacheMut.Lock()
		workUpdateCache[key] = cache
		workUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q workQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q workQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Works")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Works")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o WorkSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WorkSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"Works\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, workPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in work slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all work")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Work) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Work) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Works provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(workColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	workUpsertCacheMut.RLock()
	cache, cached := workUpsertCache[key]
	workUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			workAllColumns,
			workColumnsWithDefault,
			workColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			workAllColumns,
			workPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert Works, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(workPrimaryKeyColumns))
			copy(conflict, workPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"Works\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(workType, workMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(workType, workMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert Works")
	}

	if !cached {
		workUpsertCacheMut.Lock()
		workUpsertCache[key] = cache
		workUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Work record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Work) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Work record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Work) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Work provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), workPrimaryKeyMapping)
	sql := "DELETE FROM \"Works\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Works")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Works")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q workQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q workQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no workQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Works")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Works")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o WorkSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WorkSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(workBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"Works\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, workPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from work slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Works")
	}

	if len(workAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Work) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Work provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Work) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWork(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WorkSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty WorkSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WorkSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WorkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"Works\".* FROM \"Works\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, workPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WorkSlice")
	}

	*o = slice

	return nil
}

// WorkExistsG checks if the Work row exists.
func WorkExistsG(ctx context.Context, iD int) (bool, error) {
	return WorkExists(ctx, boil.GetContextDB(), iD)
}

// WorkExists checks if the Work row exists.
func WorkExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"Works\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Works exists")
	}

	return exists, nil
}

// Exists checks if the Work row exists.
func (o *Work) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return WorkExists(ctx, exec, o.ID)
}
